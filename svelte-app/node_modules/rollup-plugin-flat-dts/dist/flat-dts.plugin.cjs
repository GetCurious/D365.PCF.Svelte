'use strict';

var path = require('node:path');
var flatDts_api = require('./flat-dts.api.cjs');

/**
 * @module rollup-plugin-flat-dts
 */
/**
 * Creates type definitions flattening plugin instance.
 *
 * @param dtsOptions - Type definition flattening options.
 *
 * @returns Rollup output plugin instance.
 */
function flatDtsPlugin(dtsOptions) {
    return {
        name: 'flat-dts',
        async generateBundle({ dir, file }) {
            let assetPath = (filePath) => filePath;
            if (file != null) {
                dir = path.dirname(file);
            }
            if (dir != null) {
                dtsOptions = dtsOptionsRelativeToDir(dir, dtsOptions);
                assetPath = filePath => path.relative(dir, filePath);
            }
            const dts = await flatDts_api.emitFlatDts(dtsOptions);
            if (dts.diagnostics.length) {
                this.error(dts.formatDiagnostics());
            }
            dts.files.forEach(({ path, content }) => {
                this.emitFile({
                    type: 'asset',
                    fileName: assetPath(path),
                    source: content,
                });
            });
        },
    };
}
function dtsOptionsRelativeToDir(dir, dtsOptions = {}) {
    const { file = 'index.d.ts', entries = {} } = dtsOptions;
    return {
        ...dtsOptions,
        file: path.relative(process.cwd(), path.resolve(dir, file)),
        entries: Object.fromEntries(Object.entries(entries).map(([key, dtsEntry = {}]) => [
            key,
            dtsEntryRelativeToDir(dir, dtsEntry),
        ])),
    };
}
function dtsEntryRelativeToDir(dir, dtsEntry = {}) {
    const { file } = dtsEntry;
    if (file == null) {
        return dtsEntry;
    }
    return {
        ...dtsEntry,
        file: path.relative(process.cwd(), path.resolve(dir, file)),
    };
}

module.exports = flatDtsPlugin;
//# sourceMappingURL=flat-dts.plugin.cjs.map
